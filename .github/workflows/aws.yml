
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-north-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: titanic-api-ecr           # set this to your Amazon ECR repository name
  ECS_SERVICE: myservice-02                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MyCluster-02                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: fargate-family-6.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: titanic-app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r requirements/requirements.txt
    - name: Train and save pipeline
      run: python titanic_model/train_pipeline.py
    - uses: actions/upload-artifact@v2
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models/*.pkl
        retention-days: 1

  test:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models
    - name: Install test dependencies
      run: pip install -r requirements/test_requirements.txt
    - name: Test with pytest
      run: pytest

  build:
    needs: [train, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models
    - name: Install dependencies
      run: pip install --upgrade build
    - name: Build package
      run: python -m build
    - uses: actions/upload-artifact@v2
      with:
        name: my-build-package
        path: dist/*.whl
        retention-days: 1
  deploy:
    needs: [train, test, build]
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v2
      with:
        name: my-build-package
        path: titanic_model_api
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
